/* The following code was generated by JFlex 1.6.1 */

package Compilador;
import static Compilador.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/fernando/Documents/NetBeansProjects/JADA/JADA/src/Compilador/Lexer2.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\25\1\26\1\26\1\25\22\0\1\24\1\23\1\7"+
    "\1\65\3\23\1\0\1\13\1\14\1\11\1\5\1\21\1\6\1\22"+
    "\1\10\4\2\1\67\1\72\1\73\3\2\1\0\1\12\1\20\1\17"+
    "\1\20\1\23\1\0\1\47\1\43\1\56\1\64\1\66\1\70\1\71"+
    "\1\105\1\55\2\1\1\103\1\57\1\77\1\106\1\102\1\100\1\63"+
    "\1\75\1\76\1\101\1\1\1\104\1\52\1\51\1\1\1\3\1\0"+
    "\1\4\1\0\1\74\1\0\1\37\1\40\1\27\1\61\1\42\1\32"+
    "\1\34\1\60\1\33\2\1\1\50\1\44\1\31\1\30\1\46\1\1"+
    "\1\36\1\54\1\41\1\35\1\45\1\1\1\62\1\1\1\53\1\15"+
    "\1\0\1\16\7\0\1\26\71\0\1\23\u1f68\0\1\26\1\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\1\22\3\1\2"+
    "\6\3\1\4\1\0\1\25\1\1\1\0\1\21\23\3"+
    "\1\26\7\3\4\0\5\3\1\0\35\3\2\27\5\3"+
    "\1\1\13\3\1\30\13\3\1\26\46\3\1\30\36\3"+
    "\1\31\7\3\1\32\7\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\107\0\107\0\u011c\0\u011c"+
    "\0\u0163\0\u01aa\0\107\0\107\0\107\0\107\0\107\0\107"+
    "\0\u01f1\0\u01f1\0\107\0\107\0\u0238\0\u027f\0\u02c6\0\u030d"+
    "\0\u0354\0\u039b\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545"+
    "\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u011c"+
    "\0\u0163\0\107\0\u09b5\0\u09fc\0\107\0\u0a43\0\u0a8a\0\u0ad1"+
    "\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09"+
    "\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41"+
    "\0\216\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2"+
    "\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da"+
    "\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12"+
    "\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\107"+
    "\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u09fc\0\u1df4"+
    "\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c"+
    "\0\u2073\0\u20ba\0\216\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d"+
    "\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455"+
    "\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d"+
    "\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5"+
    "\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd"+
    "\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35"+
    "\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d"+
    "\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5"+
    "\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd"+
    "\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u096e\0\u3778\0\u37bf\0\u3806"+
    "\0\u384d\0\u3894\0\u38db\0\u3922\0\u096e\0\u3969\0\u39b0\0\u39f7"+
    "\0\u3a3e\0\u3a85\0\u3acc\0\u3b13";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\26\1\0\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\3\1\35\1\36\1\37"+
    "\1\3\1\40\1\41\1\42\1\43\1\3\1\41\4\3"+
    "\1\44\1\3\1\45\1\46\1\3\1\47\2\3\1\50"+
    "\1\51\1\52\1\4\1\3\1\41\2\4\1\2\1\53"+
    "\2\3\1\54\3\3\1\55\1\56\1\3\110\0\2\3"+
    "\20\0\1\25\3\0\36\3\1\0\6\3\1\57\12\3"+
    "\1\0\1\25\1\4\20\0\1\25\3\0\36\25\1\0"+
    "\1\25\1\4\2\25\2\4\1\0\12\25\2\0\1\60"+
    "\64\0\1\60\2\0\2\60\14\0\2\61\4\0\1\62"+
    "\17\0\36\61\1\0\6\61\1\0\12\61\10\0\1\63"+
    "\1\64\114\0\1\65\70\0\2\25\20\0\1\25\3\0"+
    "\36\25\1\0\6\25\1\0\12\25\24\0\2\26\62\0"+
    "\2\3\20\0\1\25\3\0\1\3\1\66\2\3\1\67"+
    "\3\3\1\70\25\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\11\3\1\71\24\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\1\3\1\72\34\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\6\3\1\73\1\74\1\75"+
    "\10\3\1\76\14\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\2\3\1\77\33\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\4\3\1\100\31\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\13\3\1\101\22\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\16\3\1\102\1\103\16\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\1\3\1\104\34\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\2\3\1\105\33\3\1\0\6\3\1\106\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\36\3\1\0\6\3"+
    "\1\106\12\3\1\0\2\3\20\0\1\25\3\0\1\3"+
    "\1\107\34\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\13\3\1\110\22\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\4\3"+
    "\1\111\31\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\6\3\1\112\1\3\1\113\25\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\1\3\1\114\6\3\1\115\25\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\13\3"+
    "\1\116\22\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\4\3\1\117\31\3\1\0\6\3"+
    "\1\106\11\3\1\120\43\0\1\121\3\0\1\122\6\0"+
    "\1\123\5\0\1\123\1\0\1\124\1\0\2\122\16\0"+
    "\2\3\20\0\1\25\3\0\26\3\1\125\7\3\1\0"+
    "\6\3\1\106\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\26\3\1\126\7\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\36\3\1\0\6\3\1\57"+
    "\4\3\1\127\5\3\1\0\2\3\20\0\1\25\3\0"+
    "\36\3\1\0\6\3\1\57\10\3\1\130\1\3\1\0"+
    "\2\3\20\0\1\25\3\0\20\3\1\131\15\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\57\24\0\36\57\1\0"+
    "\21\57\25\63\2\0\60\63\1\0\10\64\1\132\6\64"+
    "\1\0\5\64\1\0\36\64\1\0\6\64\1\0\12\64"+
    "\1\0\2\3\20\0\1\25\3\0\2\3\1\133\33\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\1\134\35\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\7\3\1\135\22\3\1\136"+
    "\3\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\12\3\1\137\23\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\34\3\1\140"+
    "\1\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\2\3\1\141\33\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\13\3\1\142"+
    "\22\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\21\3\1\143\14\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\1\3\1\144"+
    "\34\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\4\3\1\145\31\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\7\3\1\146"+
    "\26\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\12\3\1\147\3\3\1\150\17\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\10\3\1\151\25\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\10\3\1\152\25\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\1\3\1\153\34\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\12\3\1\154\23\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\57\24\0\36\57\1\0"+
    "\7\57\1\155\11\57\1\0\2\3\20\0\1\25\3\0"+
    "\16\3\1\156\17\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\7\3\1\157\26\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\1\160\35\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\7\3\1\161\26\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\2\3"+
    "\1\162\7\3\1\163\23\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\2\3\1\164\33\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\3\3\1\165\32\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\7\3\1\166\26\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\36\3\1\0\6\3\1\57\4\3\1\167\5\3"+
    "\67\0\1\170\2\0\1\170\103\0\1\171\2\0\1\171"+
    "\106\0\2\171\102\0\1\170\2\0\2\170\14\0\2\3"+
    "\20\0\1\25\3\0\36\3\1\0\3\3\1\172\2\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\23\3"+
    "\1\173\12\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\20\3\1\174\15\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\36\3"+
    "\1\0\6\3\1\57\11\3\1\175\1\0\2\3\20\0"+
    "\1\25\3\0\36\3\1\0\6\3\1\57\6\3\1\176"+
    "\3\3\1\0\7\64\1\177\1\132\6\64\1\0\5\64"+
    "\1\0\36\64\1\0\6\64\1\0\12\64\1\0\2\3"+
    "\20\0\1\25\3\0\3\3\1\200\6\3\1\201\23\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\21\3\1\202\14\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\5\3\1\203\30\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\13\3\1\204\22\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\13\3\1\205\22\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\13\3\1\206\22\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\1\207\35\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\2\3\1\210\33\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\25\3\1\202\10\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\12\3\1\211\23\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\1\212\35\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\1\3"+
    "\1\213\34\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\1\3\1\214\34\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\13\3"+
    "\1\215\22\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\2\3\1\216\33\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\5\3"+
    "\1\217\30\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\21\3\1\220\14\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\13\3"+
    "\1\221\22\3\1\0\6\3\1\57\12\3\1\0\2\57"+
    "\24\0\36\57\1\0\10\57\1\222\10\57\1\0\2\3"+
    "\20\0\1\25\3\0\13\3\1\223\22\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\32\3"+
    "\1\224\3\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\31\3\1\225\4\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\5\3"+
    "\1\226\30\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\12\3\1\227\23\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\1\3"+
    "\1\230\34\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\4\3\1\231\31\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\4\3"+
    "\1\232\31\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\13\3\1\233\22\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\14\3"+
    "\1\234\21\3\1\0\6\3\1\57\12\3\54\0\1\170"+
    "\33\0\2\3\20\0\1\25\3\0\36\3\1\0\6\3"+
    "\1\57\10\3\1\235\1\3\1\0\2\3\20\0\1\25"+
    "\3\0\36\3\1\0\6\3\1\57\1\3\1\236\10\3"+
    "\1\0\2\3\20\0\1\25\3\0\34\3\1\237\1\240"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\36\3\1\0\6\3\1\57\6\3\1\241\3\3"+
    "\1\0\2\3\20\0\1\25\3\0\36\3\1\0\2\3"+
    "\1\242\3\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\4\3\1\243\31\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\7\3\1\244\26\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\1\3\1\111\34\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\10\3\1\245\25\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\2\3\1\226\33\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\2\3\1\246\33\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\12\3\1\247\23\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\4\3\1\250\31\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\1\3\1\251\34\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\10\3\1\252\25\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\4\3\1\217\31\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\7\3\1\253\26\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\7\3\1\254\26\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\24\3\1\217\11\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\10\3\1\223\25\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\13\3\1\255\22\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\7\3\1\202\26\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\57\24\0\34\57\1\256\1\57\1\0\21\57"+
    "\1\0\2\3\20\0\1\25\3\0\7\3\1\213\26\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\10\3\1\257\25\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\4\3\1\260\31\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\10\3\1\111\25\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\10\3\1\261\25\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\7\3\1\111\26\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\1\3\1\262\34\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\2\3\1\263\33\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\1\141\35\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\36\3\1\0\6\3\1\57\6\3\1\264\3\3\1\0"+
    "\2\3\20\0\1\25\3\0\36\3\1\0\6\3\1\57"+
    "\1\3\1\265\10\3\1\0\2\3\20\0\1\25\3\0"+
    "\36\3\1\0\1\266\5\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\36\3\1\0\6\3\1\57\1\3"+
    "\1\267\10\3\1\0\2\3\20\0\1\25\3\0\34\3"+
    "\1\270\1\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\36\3\1\0\1\242\5\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\36\3\1\0"+
    "\6\3\1\271\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\5\3\1\272\30\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\10\3\1\273\25\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\30\3\1\274\5\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\14\3\1\275\3\3\1\276"+
    "\1\3\2\213\2\3\1\213\1\277\6\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\1\3"+
    "\1\300\34\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\1\3\1\301\34\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\30\3"+
    "\1\255\5\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\2\3\1\302\33\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\2\3"+
    "\1\303\33\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\25\3\1\304\10\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\10\3"+
    "\1\305\25\3\1\0\6\3\1\57\12\3\1\0\2\57"+
    "\24\0\26\57\1\306\7\57\1\0\21\57\1\0\2\3"+
    "\20\0\1\25\3\0\32\3\1\154\3\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\21\3"+
    "\1\307\14\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\1\310\35\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\11\3\1\311"+
    "\24\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\13\3\1\111\22\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\36\3\1\0"+
    "\1\312\5\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\36\3\1\0\6\3\1\57\10\3\1\242\1\3"+
    "\1\0\2\3\20\0\1\25\3\0\36\3\1\0\1\313"+
    "\5\3\1\57\12\3\1\0\2\3\20\0\1\25\3\0"+
    "\36\3\1\0\1\314\5\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\36\3\1\0\6\3\1\57\4\3"+
    "\1\315\5\3\1\0\2\57\24\0\36\57\1\0\11\57"+
    "\1\316\7\57\1\0\2\3\20\0\1\25\3\0\6\3"+
    "\1\317\27\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\7\3\1\320\26\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\10\3"+
    "\1\321\25\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\10\3\1\322\25\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\1\323"+
    "\35\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\10\3\1\324\25\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\7\3\1\204"+
    "\26\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\2\3\1\111\33\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\12\3\1\263"+
    "\23\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\10\3\1\230\25\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\10\3\1\213"+
    "\25\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\2\3\1\202\33\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\57\24\0\36\57\1\0\11\57\1\325"+
    "\7\57\1\0\2\3\20\0\1\25\3\0\21\3\1\226"+
    "\14\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\10\3\1\113\25\3\1\0\6\3\1\57"+
    "\12\3\1\0\2\3\20\0\1\25\3\0\7\3\1\226"+
    "\26\3\1\0\6\3\1\57\12\3\1\0\2\3\20\0"+
    "\1\25\3\0\36\3\1\0\6\3\1\326\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\36\3\1\0\6\3\1\57"+
    "\2\3\1\235\7\3\1\0\2\3\20\0\1\25\3\0"+
    "\34\3\1\242\1\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\36\3\1\0\6\3\1\57"+
    "\5\3\1\234\4\3\1\0\2\57\24\0\36\57\1\0"+
    "\20\57\1\327\1\0\2\3\20\0\1\25\3\0\7\3"+
    "\1\330\26\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\4\3\1\202\31\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\33\3"+
    "\1\331\2\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\12\3\1\332\23\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\13\3"+
    "\1\333\22\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\7\3\1\334\26\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\57\24\0\36\57\1\0\3\57"+
    "\1\335\15\57\1\0\2\57\24\0\36\57\1\0\16\57"+
    "\1\336\2\57\1\0\2\57\24\0\36\57\1\0\10\57"+
    "\1\337\10\57\1\0\2\3\20\0\1\25\3\0\10\3"+
    "\1\340\25\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\4\3\1\341\31\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\13\3"+
    "\1\342\22\3\1\0\6\3\1\57\12\3\1\0\2\3"+
    "\20\0\1\25\3\0\21\3\1\343\14\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\3\20\0\1\25\3\0\5\3"+
    "\1\304\30\3\1\0\6\3\1\57\12\3\1\0\2\57"+
    "\24\0\36\57\1\0\17\57\1\344\1\57\1\0\2\57"+
    "\24\0\36\57\1\0\1\345\20\57\1\0\2\3\20\0"+
    "\1\25\3\0\1\346\35\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\15\3\1\226\20\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\3\20\0\1\25"+
    "\3\0\7\3\1\347\26\3\1\0\6\3\1\57\12\3"+
    "\1\0\2\3\20\0\1\25\3\0\13\3\1\317\22\3"+
    "\1\0\6\3\1\57\12\3\1\0\2\57\24\0\36\57"+
    "\1\0\20\57\1\350\1\0\2\3\20\0\1\25\3\0"+
    "\4\3\1\351\31\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\3\20\0\1\25\3\0\4\3\1\304\31\3\1\0"+
    "\6\3\1\57\12\3\1\0\2\57\24\0\36\57\1\0"+
    "\15\57\1\352\3\57\1\0\2\3\20\0\1\25\3\0"+
    "\1\3\1\353\34\3\1\0\6\3\1\57\12\3\1\0"+
    "\2\57\24\0\36\57\1\0\1\354\20\57\1\0\2\3"+
    "\20\0\1\25\3\0\2\3\1\213\33\3\1\0\6\3"+
    "\1\57\12\3\1\0\2\57\24\0\36\57\1\0\6\57"+
    "\1\271\12\57";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15194];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\2\11\4\1\6\11\2\1\2\11"+
    "\34\1\1\0\1\11\1\1\1\0\1\11\33\1\4\0"+
    "\5\1\1\0\35\1\1\11\164\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int linea;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 27: break;
          case 2: 
            { return ERROR;
            }
          case 28: break;
          case 3: 
            { lexeme=yytext(); linea=yyline; return IDENTIFICADOR;
            }
          case 29: break;
          case 4: 
            { lexeme=yytext(); linea=yyline; return ENTERO;
            }
          case 30: break;
          case 5: 
            { lexeme=yytext(); linea=yyline; return CORCHETE_ABIERTO;
            }
          case 31: break;
          case 6: 
            { lexeme=yytext(); linea=yyline; return CORCHETE_CERRADO;
            }
          case 32: break;
          case 7: 
            { lexeme=yytext(); linea=yyline; return SIGNO_MAS;
            }
          case 33: break;
          case 8: 
            { lexeme=yytext(); linea=yyline; return SIGNO_MENOS;
            }
          case 34: break;
          case 9: 
            { lexeme=yytext(); linea=yyline; return SIGNO_DIVISION;
            }
          case 35: break;
          case 10: 
            { lexeme=yytext(); linea=yyline; return SIGNO_MULTIPLICACION;
            }
          case 36: break;
          case 11: 
            { lexeme=yytext(); linea=yyline; return PUNTO_Y_COMA;
            }
          case 37: break;
          case 12: 
            { lexeme=yytext(); linea=yyline; return PARENTESIS_ABIERTO;
            }
          case 38: break;
          case 13: 
            { lexeme=yytext(); linea=yyline; return PARENTESIS_CERRADO;
            }
          case 39: break;
          case 14: 
            { lexeme=yytext(); linea=yyline; return LLAVE_ABIERTA;
            }
          case 40: break;
          case 15: 
            { lexeme=yytext(); linea=yyline; return LLAVE_CERRADA;
            }
          case 41: break;
          case 16: 
            { lexeme=yytext(); linea=yyline; return IGUAL;
            }
          case 42: break;
          case 17: 
            { lexeme=yytext(); linea=yyline; return COMPARACION;
            }
          case 43: break;
          case 18: 
            { lexeme=yytext(); linea=yyline; return COMA;
            }
          case 44: break;
          case 19: 
            { lexeme=yytext(); linea=yyline; return PUNTO;
            }
          case 45: break;
          case 20: 
            { lexeme=yytext(); linea=yyline; return CADERROR;
            }
          case 46: break;
          case 21: 
            { lexeme=yytext(); linea=yyline; return CADENA;
            }
          case 47: break;
          case 22: 
            { lexeme=yytext(); linea=yyline; return PALABRA_RESERVADA;
            }
          case 48: break;
          case 23: 
            { lexeme=yytext(); linea=yyline; return PITCH_NOTATION;
            }
          case 49: break;
          case 24: 
            { lexeme=yytext(); linea=yyline; return FUNCION_RESERVADA;
            }
          case 50: break;
          case 25: 
            { lexeme=yytext(); linea=yyline; return NOTE_STRING;
            }
          case 51: break;
          case 26: 
            { lexeme=yytext(); linea=yyline; return NOTE_VALUE;
            }
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
